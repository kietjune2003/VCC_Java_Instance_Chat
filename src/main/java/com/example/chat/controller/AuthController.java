package com.example.chat.controller;

import com.example.chat.service.AuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
@Slf4j // üëâ Ghi log b·∫±ng Slf4j
public class AuthController {

    private final AuthService authService;

    /**
     * API ƒëƒÉng nh·∫≠p. Tr·∫£ v·ªÅ JWT access token v√† refresh token.
     * @param req Map ch·ª©a username v√† password
     * @return ResponseEntity ch·ª©a JWT tokens
     */
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> req, @RequestHeader("User-Agent") String userAgent) {
        String username = req.get("username");
        String password = req.get("password");

        // Log th√¥ng tin API ƒë∆∞·ª£c g·ªçi
        log.info("API /api/login called for user '{}'", username);

        // G·ªçi service ƒëƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        return authService.login(username, password, userAgent); // Truy·ªÅn th√™m userAgent v√†o service
    }

    /**
     * API l√†m m·ªõi token. Tr·∫£ v·ªÅ m·ªôt access token m·ªõi n·∫øu refresh token c√≤n hi·ªáu l·ª±c.
     * @param req Map ch·ª©a refresh token
     * @return ResponseEntity ch·ª©a access token m·ªõi
     */
    @PostMapping("/refresh")
    public ResponseEntity<?> refresh(@RequestBody Map<String, String> req, @RequestHeader("User-Agent") String userAgent) {
        String refreshToken = req.get("refreshToken");

        // Log th√¥ng tin API ƒë∆∞·ª£c g·ªçi
        log.info("API /api/refresh called with refresh token '{}'", refreshToken);

        // G·ªçi service l√†m m·ªõi token v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        return authService.refreshToken(refreshToken, userAgent); // Truy·ªÅn th√™m userAgent v√†o service
    }

    /**
     * API truy c·∫≠p t√†i nguy√™n b·∫£o v·ªá. Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa JWT access token.
     * @param authHeader Header ch·ª©a Bearer token
     * @return ResponseEntity ch·ª©a t√†i nguy√™n b·∫£o v·ªá
     */
    @GetMapping("/protected")
    public ResponseEntity<?> protectedResource(@RequestHeader("Authorization") String authHeader, @RequestHeader("User-Agent") String userAgent) {
        // Log th√¥ng tin API ƒë∆∞·ª£c g·ªçi
        log.info("API /api/protected called with Authorization header: '{}'", authHeader);

        // G·ªçi service ƒë·ªÉ l·∫•y t√†i nguy√™n b·∫£o v·ªá
        return authService.getProtectedResource(authHeader, userAgent); // Truy·ªÅn th√™m userAgent v√†o service
    }
}
