package com.example.chat.filter;

import com.example.chat.entity.UserToken;
import com.example.chat.repository.UserTokenRepository;
import com.example.chat.util.JwtUtil;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import jakarta.servlet.*;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.time.LocalDateTime;

@Component
@RequiredArgsConstructor
@Slf4j
public class JwtFilter implements Filter {

    private final JwtUtil jwtUtil;
    private final UserTokenRepository userTokenRepository;

    /**
     * ‚úÖ B·ªô l·ªçc JWT ƒë·ªÉ x√°c th·ª±c m·ªói request g·ª≠i v√†o h·ªá th·ªëng
     * N·∫øu token h·ª£p l·ªá ‚Üí cho qua.
     * N·∫øu token h·∫øt h·∫°n nh∆∞ng refresh token c√≤n h·∫°n ‚Üí c·∫•p l·∫°i access token m·ªõi.
     * N·∫øu token kh√¥ng h·ª£p l·ªá ‚Üí tr·∫£ v·ªÅ l·ªói 401.
     */
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String header = httpRequest.getHeader("Authorization");

        // ‚úÖ Ki·ªÉm tra c√≥ Authorization header d·∫°ng Bearer kh√¥ng
        if (header != null && header.startsWith("Bearer ")) {
            String token = header.substring(7); // Lo·∫°i b·ªè "Bearer "
            String userAgent = httpRequest.getHeader("User-Agent"); // L·∫•y th√¥ng tin thi·∫øt b·ªã

            try {
                // ‚úÖ X√°c th·ª±c access token v√† ki·ªÉm tra kh·ªõp userAgent
                String username = jwtUtil.validateToken(token, userAgent);
                log.debug("JWT validated for user '{}' and userAgent matched", username);

                // ‚úÖ Token h·ª£p l·ªá ‚Üí ti·∫øp t·ª•c filter chain
                chain.doFilter(request, response);
                return;

            } catch (ExpiredJwtException e) {
                // ‚è∞ Access token ƒë√£ h·∫øt h·∫°n
                String username = e.getClaims().getSubject();
                log.warn("Access token expired for '{}'", username);

                // üîç T√¨m access token trong database (b·∫£ng user_tokens)
                UserToken userToken = userTokenRepository.findByAccessToken(token).orElse(null);
                if (userToken == null) {
                    log.warn("Access token not found in DB");
                    ((HttpServletResponse) response).sendError(HttpServletResponse.SC_UNAUTHORIZED, "Invalid token");
                    return;
                }

                // üß™ Ki·ªÉm tra refresh token c√≤n h·∫°n kh√¥ng
                if (userToken.getRefreshTokenExpiresAt().isAfter(LocalDateTime.now())) {
                    // ‚úÖ Refresh token c√≤n h·∫°n ‚Üí c·∫•p l·∫°i access token m·ªõi
                    String newAccessToken = jwtUtil.generateAccessToken(username, userAgent);

                    // üîÅ C·∫≠p nh·∫≠t token m·ªõi v√†o DB
                    userToken.setAccessToken(newAccessToken);
                    userToken.setTokenCreatedAt(LocalDateTime.now());
                    userToken.setTokenExpiresAt(LocalDateTime.now().plusMinutes(10));
                    userTokenRepository.save(userToken);

                    log.info("Issued new access token for user '{}'", username);

                    // ‚úÖ ƒê∆∞a access token m·ªõi v√†o response header
                    HttpServletResponse httpResponse = (HttpServletResponse) response;
                    httpResponse.setHeader("New-Access-Token", newAccessToken);

                    // Cho ph√©p ƒëi ti·∫øp filter chain
                    chain.doFilter(request, response);
                    return;
                } else {
                    // ‚ùå Refresh token c≈©ng h·∫øt h·∫°n ‚Üí b·∫Øt ƒëƒÉng nh·∫≠p l·∫°i
                    log.warn("Refresh token expired for '{}'", username);
                    ((HttpServletResponse) response).sendError(HttpServletResponse.SC_UNAUTHORIZED, "Refresh token expired");
                    return;
                }

            } catch (JwtException e) {
                // ‚ùå Access token kh√¥ng h·ª£p l·ªá (gi·∫£ m·∫°o, sai ch·ªØ k√Ω, sai user-agent...)
                log.error("Invalid JWT token: {}", e.getMessage());
                ((HttpServletResponse) response).sendError(HttpServletResponse.SC_UNAUTHORIZED, "Invalid token");
                return;
            }
        }

        // ‚õî Kh√¥ng c√≥ Authorization header ‚Üí cho qua (c√≥ th·ªÉ l√† request public)
        log.debug("No Authorization header found, continuing filter chain");
        chain.doFilter(request, response);
    }
}
